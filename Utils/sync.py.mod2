import sys, os
sys.path.append('..')
from pathlib import Path
from copy import copy

import numpy as np
from scipy import stats
import pandas as pd

sys.path.append('..')
from Utils import behavior_analysis_utils as bhv
from Utils import utils

from scipy.optimize import curve_fit

"""
 
  ######  ##    ## ##    ##  ######      ######  ##          ###     ######   ######  
 ##    ##  ##  ##  ###   ## ##    ##    ##    ## ##         ## ##   ##    ## ##    ## 
 ##         ####   ####  ## ##          ##       ##        ##   ##  ##       ##       
  ######     ##    ## ## ## ##          ##       ##       ##     ##  ######   ######  
       ##    ##    ##  #### ##          ##       ##       #########       ##       ## 
 ##    ##    ##    ##   ### ##    ##    ##    ## ##       ##     ## ##    ## ##    ## 
  ######     ##    ##    ##  ######      ######  ######## ##     ##  ######   ######  
 
"""
def lin(x, m, b):
    return m * x + b

def quad(x, x0, a, b, c):
    return a*(x-x0)**2 + b*(x-x0) + c

def cube(x, x0, a, b, c, d):
    return a*(x-x0)**3 + b*(x-x0)**2 + c*(x-x0) + d

def poly(x, x0, *a):
    # print(len(a))
    return np.sum([a[i]*(x-x0)**i for i in range(len(a))])

def polyv(x, *args):
    n = int(len(args)/2)
    x0 = args[:n]
    a = args[n:]
    return np.sum(np.array([a[i]*(x-x0[i])**i for i in range(len(a))]),axis=0)
    
class Syncer(object):
    def __init__(self):
        self.data = {}
        self.pairs = {}
        self.graph = {}
        self.funcs = {}

    def check(self, A, B):
        """ check consistency of all clock pulses and if possible fixes them """

        for x in [A, B]:
            if self.data[x].shape[0] == 0:
                utils.printer("sync failed - %s is empty" % x, 'error')
                return False

        if self.data[A].shape[0] != self.data[B].shape[0]:

            # Decide which is the reference to cut to
            if self.data[A].shape[0] > self.data[B].shape[0]:
                bigger = 'A'
                t_bigger = self.data[A]
                t_smaller = self.data[B]
            else:
                bigger = 'B'
                t_bigger = self.data[B]
                t_smaller = self.data[A]
            utils.printer("sync problem - unequal number, %s has more sync signals" % bigger, 'warning')
            utils.printer("Number in %s: %i" % (A, self.data[A].shape[0]),'warning')
            utils.printer("Number in %s: %i" % (B, self.data[B].shape[0]),'warning')

            # Compute the difference
            offset = np.argmax(np.correlate(np.diff(t_bigger), np.diff(t_smaller), mode='valid'))

            # Cut the initial timestamps from the argument with more clock pulses
            t_bigger = t_bigger[offset:t_smaller.shape[0]+offset]

            if bigger == 'A':
                self.data[A] = t_bigger
                self.data[B] = t_smaller
            else:
                self.data[B] = t_bigger
                self.data[A] = t_smaller
            
            return True
        else:
            return True

    def guess_p0(self, func, A, B):
        if func == lin:
            b = A[0]
            m = (B[-1] - B[0]) / (A[-1] - A[0])
            return (m,b)

        if func == quad:
            x0 = (A.max() - A.min()) / 2
            a = 0
            b = (B[-1] - B[0]) / (A[-1] - A[0])
            c = A[0]
            return (x0,a,b,c)

        if func == cube:
            x0 = (A.max() - A.min()) / 2
            a = 0
            b = 0
            c = (B[-1] - B[0]) / (A[-1] - A[0])
            d = A[0]
            return (x0,a,b,c,d)


    # def _sync(self, A, B, check=True, symmetric=True, order=2):
    #     """ linreg sync of A to B """
    #     # check and abort if fails
    #     success = self.check(A, B)
    #     if not success:
    #         return False

    #     # m, b = stats.linregress(self.data[A], self.data[B])[:2]
    #     # p0 = self.guess_p0(fitfun, self.data[A], self.data[B])

    #     if order == 1:
    #         fitfun = lin
    #     if order == 2:
    #         fitfun = quad
    #     if order == 3:
    #         fitfun = cube

    #     p0 = self.guess_p0(fitfun, self.data[A], self.data[B])
    #     pfit = curve_fit(fitfun, self.data[A], self.data[B], p0=p0)[0]
    #     return pfit, fitfun

    # def sync(self, A, B, check=True, symmetric=True, order=2, pieces=1):
    #     A_splits, B_splits = self.make_splits_for_piecewise(A, B, N=pieces)
    #     print(A_splits)
    #     self.pairs[(A,B)] = []
    #     self.funcs[(A,B)] = []
    #     for i in range(pieces):
    #         pfit, fitfun = self._sync(A_splits[i], B_splits[i], check=False, symmetric=False, order=order)
    #         self.pairs[(A,B)].append(pfit)
    #         self.funcs[(A,B)].append(fitfun)

    #     if A in self.graph:
    #         self.graph[A].append(B)
    #     else:
    #         self.graph[A] = [B]
    #     if symmetric:
    #         self.sync(B, A, symmetric=False, order=order, pieces=pieces)
    #     return True


    def sync(self, A, B, check=True, symmetric=True, order=2, pieces=1):
        """ linreg sync of A to B """
        # check and abort if fails
        success = self.check(A, B)
        if not success:
            utils.printer("not successsful")
            return False

        # m, b = stats.linregress(self.data[A], self.data[B])[:2]
        # p0 = self.guess_p0(fitfun, self.data[A], self.data[B])

        # if order == 1:
        #     fitfun = lin
        # if order == 2:
        #     fitfun = quad
        # if order == 3:
        #     fitfun = cube
        # if order == 0:
        # p0 = self.guess_p0(fitfun, self.data[A], self.data[B])

        fitfun = polyv
        pfit = curve_fit(fitfun, self.data[A], self.data[B], p0=p0)[0]

        self.pairs[(A,B)] = pfit
        self.funcs[(A,B)] = fitfun
        if A in self.graph:
            self.graph[A].append(B)
        else:
            self.graph[A] = [B]
        if symmetric:
            self.sync(B, A, symmetric=False, order=order)
        return True

    # def truncate_to_divisible(self, A, N):
    #     data = self.data[A]
    #     if data.shape[0] % N == 0:
    #         return data
    #     else:
    #         r = data.shape[0] % N
    #         return data[:-r]

    # def make_splits_for_piecewise(self, A, B, N=2):
    #     # truncate to possible
    #     splits_A = np.split(self.truncate_to_divisible(A, N), N)
    #     splits_B = np.split(self.truncate_to_divisible(B, N), N)
    #     return splits_A, splits_B

    def convert(self, t, A, B, match_dtype=True):
        path = self._find_shortest_path(A, B)

        for i in range(1,len(path)):
            t = self._convert(t, path[i-1], path[i])

        if match_dtype:
            t = t.astype(self.data[B].dtype)

        return t

    # def _convert(self, t, A ,B):
    #     if (A,B) not in self.pairs:
    #         self.sync(A,B)
    #     yhat = []
    #     for i in len(self.pairs[(A,B)]):
    #         pfit = self.pairs[(A,B)][i]
    #         func = self.funcs[(A,B)][i]
    #         yhat.append(func(t, *pfit))
    #     yhat = np.concatenate(yhat)
    #     return yhat

    def _convert(self, t, A ,B):
        if (A,B) not in self.pairs:
            self.sync(A,B)
        pfit = self.pairs[(A,B)]
        func = self.funcs[(A,B)]
        return func(t, *pfit)

    def _find_shortest_path(self, start, end, path=[]):
        # from https://www.python.org/doc/essays/graphs/
        path = path + [start]
        if start == end:
            return path
        if start not in self.graph:
            return None
        shortest = None
        for node in self.graph[start]:
            if node not in path:
                newpath = self._find_shortest_path(node, end, path)
                if newpath:
                    if not shortest or len(newpath) < len(shortest):
                        shortest = newpath
        return shortest

    def eval_plot(self, plot_residuals=True):
        import matplotlib.pyplot as plt
        import seaborn as sns

        fig, axes = plt.subplots(ncols=len(self.pairs),figsize=[14,4])
        for i, pair in enumerate(self.pairs):
            A, B = pair
            # m, b = self.pairs[pair]
            if plot_residuals:
                # axes[i].plot(self.data[A], self.data[B] - (self.data[A]*m + b), 'o')
                x = self.data[A]
                y = self.data[B]
                yhat = self._convert(self.data[A], A, B)
                res = y - yhat
                axes[i].plot(x, res, 'o')
                # axes[i].plot(x, yhat, lw=2, color='r')
            else:
                axes[i].plot(self.data[A], self.data[B], 'o')
                t = np.linspace(self.data[A][0], self.data[A][-1], 100)
                axes[i].plot(t, t * m + b, alpha=0.5, lw=1)

            axes[i].set_title("%s - %s" % pair)
            axes[i].set_xlabel(A)
            axes[i].set_ylabel(B)

        for ax in axes:
            ax.axhline(0,linestyle=':',color='k',lw=1,alpha=0.75)
        sns.despine(fig)
        fig.tight_layout()

        

"""
 
 ########     ###    ########   ######  ######## ########  
 ##     ##   ## ##   ##     ## ##    ## ##       ##     ## 
 ##     ##  ##   ##  ##     ## ##       ##       ##     ## 
 ########  ##     ## ########   ######  ######   ########  
 ##        ######### ##   ##         ## ##       ##   ##   
 ##        ##     ## ##    ##  ##    ## ##       ##    ##  
 ##        ##     ## ##     ##  ######  ######## ##     ## 
 
"""

def get_arduino_sync(log_path, sync_event_name="TRIAL_ENTRY_EVENT"):
    LogDf = bhv.get_LogDf_from_path(log_path)
    SyncDf = bhv.get_events_from_name(LogDf, sync_event_name)
    return SyncDf

def parse_harp_sync(csv_path, trig_len=1, ttol=0.2):
    harp_sync = pd.read_csv(csv_path, names=['t']).values.flatten()
    t_sync_high = harp_sync[::2]
    t_sync_low = harp_sync[1::2]

    dts = np.array(t_sync_low) - np.array(t_sync_high)
    good_timestamps = ~(np.absolute(dts-trig_len)>ttol)
    t_sync = np.array(t_sync_high)[good_timestamps]
    SyncDf = pd.DataFrame(t_sync, columns=['t'])
    return SyncDf

def parse_cam_sync(csv_path, offset=1, return_full=False):
    """ csv_path is the video_sync_path, files called 
    bonsai_harp_sync.csv """

    Df = pd.read_csv(csv_path, names=['frame','t','GPIO'])

    # wraparound correct
    # Df = bhv.correct_wraparound(Df)
    _Df = copy(Df)
    while np.any(np.diff(Df['t']) < 0):
        reversal_ind = np.where(np.diff(Df['t']) < 0)[0][0]
        Df['t'].iloc[reversal_ind+1:] += _Df['t'].iloc[reversal_ind]

    ons = np.where(np.diff(Df.GPIO) > 1)[0]
    offs = np.where(np.diff(Df.GPIO) < -1)[0] # can be used to check correct length

    SyncDf = Df.iloc[ons+offset] # one frame offset
    if return_full is False:
        return SyncDf
    else:
        return SyncDf, Df


# # %%
# A = 'arduino'
# B = 'loadcell'
# fig, axes = plt.subplots()
# axes.plot(Sync.data[A],Sync.data[B],'.')
# axes.plot(Sync.data[A],Sync.convert(Sync.data[A],A,B),lw=1,alpha=0.8,color='r')
# # axes.plot(Sync.data[A],Sync.data[B]-Sync.convert(Sync.data[A],A,B),lw=1,alpha=0.8,color='r')

# # %%
# A = np.load("/media/georg/htcondor/shared-paton/georg/therapist_testing_sessions_to_keep/2021-11-23_12-13-59_interval_categorization_v1/arduino_sync.npy")
# B = np.load("/media/georg/htcondor/shared-paton/georg/therapist_testing_sessions_to_keep/2021-11-23_12-13-59_interval_categorization_v1/loadcell_sync.npy")
# # %% fake data with quad component

# m = 1
# b = 1

# x = np.linspace(0,100,100)

# y = x * m + b
# a = 0.001
# y += a * (x-50) **2

# from copy import copy

# # xx = copy(x)
# # x = y
# # y = xx

# # x = B
# # y = A

# # def quadi(x, x0, a, b, c):
# #     return (-b + np.sqrt(b**2-4*a*c)) / 2 * a

# def guess_p0(func, A, B):
#     if func == lin:
#         b = A[0]
#         m = (B[-1] - B[0]) / (A[-1] - A[0])
#         return (m,b)

#     if func == quad:
#         x0 = (A.max() - A.min()) / 2
#         a = 0
#         b = (B[-1] - B[0]) / (A[-1] - A[0])
#         c = A[0]
#         return (x0,a,b,c)

#     if func == cube:
#         x0 = (A.max() - A.min()) / 2
#         a = 0
#         b = 0
#         c = (B[-1] - B[0]) / (A[-1] - A[0])
#         d = A[0]
#         return (x0,a,b,c,d)

# fig, axes = plt.subplots(nrows=2,sharex=True)
# axes[0].plot(x,y,'.')
# from scipy.optimize import curve_fit
# # p0 = (1,1)
# p0 = guess_p0(lin, x, y)
# pfit = curve_fit(lin, x, y, p0=p0)[0]
# yhat = lin(x,*pfit)
# axes[0].plot(x, yhat,color='r')
# res_lin = y-yhat
# axes[1].plot(x, res_lin,'.',color='b',label='res lin')

# # p0 = (50,1,1,2)
# p0 = guess_p0(quad, x, y)
# pfit = curve_fit(quad, x, y, p0=p0)[0]
# yhat = quad(x,*pfit)
# res_quad = y-yhat
# axes[1].plot(x, res_quad,'.',color='g',label='res quad')

# # p0 = (50,2,2,2,1)
# p0 = guess_p0(cube, x, y)
# pfit = curve_fit(cube, x, y, p0=p0)[0]
# yhat = cube(x,*pfit)
# res_cube = y-yhat
# axes[1].plot(x, res_cube,'.',color='r',label='res cube')

# axes[1].legend()

# # pfit = curve_fit(quad, x, res_lin, p0=p0)[0]
# # reshat = quad(x,*pfit)
# # axes[1].plot(x, reshat,'.',color='r')
# # %%
